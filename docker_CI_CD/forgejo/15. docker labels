# A runner label is just a name (or tag) that tells Forgejo where a job should run.

This guide explains how to **check and update Forgejo runner labels**, and how to run workflows either 
in **container-based runners** (inside Docker-in-Docker) or directly on the **runner host container**.

############################################ 1. Checking Current Runner Labels
majid@forgejo-runner:~$ cat data/.runner
{
  "WARNING": "This file is automatically generated by act-runner. Do not edit it manually unless you know what you are doing. Removing this file will cause act runner to re-register as a new runner.",
  "id": 3,
  "uuid": "34395e61-b83f-4e33-88e7-15997d700b07",
  "name": "forgejo-runner",
  "token": "eff066b6ea6a1911604f13e13feadf3705e3f944",
  "address": "http://10.13.14.30:3000",
  "labels": [
    "ubuntu-22.04:docker://ghcr.io/catthehacker/ubuntu:act-22.04",
    "self-hosted:host",
    "docker:docker://node:22-bookworm"
  ]
}

## notes
- ubuntu-22.04 → Runs inside a container (via Docker-in-Docker).
- self-hosted → Runs directly on the Forgejo runner container (host mode).
- docker → Runs a specific container image (node:22-bookworm).

############################################ 2. Updating Runner Labels
# make runner container down
majid@forgejo-runner:~$ docker compose down
[+] Running 3/3
 ✔ Container runner       Removed                                                                                        0.0s
 ✔ Container docker_dind  Removed                                                                                        1.1s
 ✔ Network majid_default  Removed                                                                                        0.1s

# edit labels
majid@forgejo-runner:~$ sudo nano data/.runner

# make runner container up after label update
majid@forgejo-runner:~$ docker compose up -d
[+] Running 3/3
 ✔ Network majid_default  Created                                                                                        0.1s
 ✔ Container docker_dind  Started                                                                                        0.3s
 ✔ Container runner       Started                                                                                        0.4s


# Verify status in Forgejo web UI:
https://forgejo.rayka-co.com/ --> settings --> actions --> runners
If it shows Offline, check .runner for JSON syntax errors.
status must be again idle or active and not offline otherwise it shows probably some json syntax error or other errors in .runner configuration

############################################ 3. Workflow Example 1 – Run Inside a Container (Ubuntu 22.04)
# .forgejo/workflows/training1.yml
# .github/workflows/test-ubuntu22.yml
name: Test Ubuntu-22.04 Container

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: [ubuntu-22.04]
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "Hello from pinned Ubuntu-22.04 container!"
          uname -a
          sleep 120


# run workflow and then check to make sure that workflow is running on a container inside dind container
majid@forgejo-runner:~$ docker ps -a
CONTAINER ID   IMAGE                                COMMAND                  CREATED       STATUS       PORTS           NAMES
ce5938033ab4   data.forgejo.org/forgejo/runner:11   "/bin/sh -c 'sleep 5…"   4 hours ago   Up 4 hours                   runner
dee54dbe6d73   docker:dind                          "dockerd-entrypoint.…"   4 hours ago   Up 4 hours   2375-2376/tcp   docker_dind
majid@forgejo-runner:~$ docker exec -it docker_dind sh
/ # docker ps -a
CONTAINER ID   IMAGE                                   COMMAND               CREATED         STATUS         PORTS     NAMES
18ba10d574c1   ghcr.io/catthehacker/ubuntu:act-22.04   "tail -f /dev/null"   4 seconds ago   Up 3 seconds             FORGEJO-ACTIONS-TASK-41_WORKFLOW-90b67fb6f612d05f68dbfbeac91790653a30856321d599042d23222caa60ee01_JOB-test
/ # docker exec -it 18ba10d574c1 bash
root@18ba10d574c1:/workspace/forgejo/training1# ps aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  0.1  0.0   3244  1536 ?        Ss   20:27   0:00 tail -f /dev/null
root         104  0.0  0.0      0     0 ?        Zs   20:27   0:00 [git] <defunct>
root         116  0.1  0.0   4784  3456 ?        Ss   20:27   0:00 bash --noprofile --norc -e -o pipefail /var/run/act/workflo
root         124  0.0  0.0   3212  1664 ?        S    20:27   0:00 sleep 120
root         125  0.4  0.0   5048  3840 pts/0    Ss   20:27   0:00 bash
root         133  0.0  0.0   7484  3072 pts/0    R+   20:27   0:00 ps aux


############################################ 4. Workflow Example 2 – Run on Runner Host
# .forgejo/workflows/training2.yml
name: Host runner demo
on:
  workflow_dispatch:

jobs:
  host-job:
    runs-on: self-hosted
    steps:
      - name: Run directly on host
        run: |
          echo "This runs on the host"
          uname -a
          id -u
          touch /tmp/host_demo
          ls -l /tmp/host_demo
          sleep 133


# Verification
# run workflow and then check to make sure that workflow is running on runner container itself
majid@forgejo-runner:~$ docker ps -a
CONTAINER ID   IMAGE                                COMMAND                  CREATED       STATUS       PORTS           NAMES
ce5938033ab4   data.forgejo.org/forgejo/runner:11   "/bin/sh -c 'sleep 5…"   4 hours ago   Up 4 hours                   runner
dee54dbe6d73   docker:dind                          "dockerd-entrypoint.…"   4 hours ago   Up 4 hours   2375-2376/tcp   docker_dind
majid@forgejo-runner:~$ docker exec -it runner bash
ce5938033ab4:~$ ps aux
PID   USER     TIME  COMMAND
    1 1001      0:07 forgejo-runner daemon
   16 1001      0:00 bash --noprofile --norc -e -o pipefail /data/.cache/act/2c36e3e28fa091b6/act/workflow/0.sh
   21 1001      0:00 sleep 133
   23 1001      0:00 bash
   29 1001      0:00 ps aux


############################################ 5. Summary
- Edit runner labels → modify data/.runner and restart runner with docker compose up -d.
- Container-based jobs (e.g., ubuntu-22.04) run inside Docker-in-Docker.
- Host-based jobs (self-hosted) run directly in the runner container.
- Always verify workflows with docker ps and ps aux inside the appropriate container.
